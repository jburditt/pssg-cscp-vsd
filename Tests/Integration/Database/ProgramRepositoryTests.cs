using Gov.Cscp.Victims.Public.Controllers;
using Manager.Contract;
using MediatR;
using Microsoft.Extensions.Hosting.Internal;
using Newtonsoft.Json;
using System.Threading;

public class ProgramRepositoryTests(
    IProgramRepository programRepository, IInvoiceRepository invoiceRepository, IPaymentRepository paymentRepository, IContractRepository contractRepository, 
    IInvoiceLineDetailRepository invoiceLineDetailRepository)
{
    // WARNING!!! these are not reliable tests, they will fail, these were shortcuts I used for building a POC, these tests will need to be adjusted in order to be idempotent

    [Fact]
    public void Upsert()
    {
        // Arrange
        var program = FakeData.Programs[0];

        // Act
        var id = programRepository.Upsert(program);

        // Assert
        Assert.True(id != Guid.Empty);
    }

    // TODO not a consistent test yet
    [Fact]
    public void Query()
    {
        // Arrange
        var programQuery = new ProgramQuery();
        programQuery.Id = FakeData.Programs[0].Id;

        // Act
        var result = programRepository.Query(programQuery);

        // Assert
        Assert.True(result.Programs.Count() > 0);
    }

    [Fact]
    public void Delete()
    {
        // Arrange
        var program = FakeData.Programs[0];

        // Act
        var result = programRepository.Delete(program.Id);

        // Assert
        Assert.True(result);
    }

    [Fact]
    public void Get_Approved()
    {
        var quarter = 1;
        var provinceBc = Constant.ProvinceBc;
        var currency = new Currency
        {
            Id = Constant.CadCurrency,
            IsoCurrencyCode = IsoCurrencyCode.CAD.ToString()
        };
        var currencyResult = new FindCurrencyResult(currency);

        var invoiceDate = new ProgramController(null, new ApplicationLifetime(null), null).GetInvoiceDate(quarter);

        var dummy = new GetApprovedCommand();
        var programResult = programRepository.GetApproved();

        var invoices = new List<(Invoice invoice, InvoiceLineDetail invoiceLineDetail)>();
        foreach (var program in programResult.Programs)
        {
            var invoiceQuery = new InvoiceQuery();
            invoiceQuery.ProgramId = program.Id;
            invoiceQuery.InvoiceDate = invoiceDate;
            invoiceQuery.Origin = Origin.AutoGenerated;
            // check if invoice has been already created
            var invoiceResult = invoiceRepository.Query(invoiceQuery);
            if (invoiceResult.Invoices.Any())
            {
                continue;
            }

            var paymentQuery = new PaymentQuery();
            paymentQuery.ProgramId = program.Id;
            paymentQuery.ContractId = program.ContractId;
            paymentQuery.ExcludeStatusCodes = new List<PaymentStatusCode> { PaymentStatusCode.Negative, PaymentStatusCode.Canceled };
            var paymentResult = paymentRepository.Query(paymentQuery);
            var paymentTotal = paymentResult.Payments.Sum(p => p.PaymentTotal);
            var scheduledPaymentAmount = program.CpuSubtotal - paymentTotal / (5 - quarter);
            if (scheduledPaymentAmount == 0)
            {
                throw new Exception("Line item is zero.");
            }

            var invoice = new Invoice();
            invoice.Id = Guid.NewGuid();
            invoice.Origin = Origin.AutoGenerated;
            var contractQuery = new FindContractQuery();
            contractQuery.Id = program.ContractId;
            var customerResults = contractRepository.FirstOrDefault(contractQuery);
            invoice.PayeeId = customerResults.Contract?.Id;
            invoice.ContractId = program.ContractId;
            invoice.ProgramId = program.Id;
            invoice.CurrencyId = currencyResult.Currency.Id;
            invoice.ProgramUnit = ProgramUnit.Cpu;
            invoice.CvapInvoiceType = InvoiceType.OtherPayments;
            invoice.OwnerId = program.OwnerId;
            invoice.TaxExemption = TaxExemption.NoTax;
            invoice.InvoiceDate = invoiceDate;
            invoice.CpuScheduledPaymentDate = invoiceDate.AddDays(3);
            invoice.MethodOfPayment = customerResults.Contract?.MethodOfPayment;
            invoice.CpuInvoiceType = CpuInvoiceType.ScheduledPayment;
            invoice.ProvinceStateId = provinceBc;
            invoice.PaymentAdviceComments = string.Format("{0}, {1}-{2}-{3}", program.ContractName, invoiceDate.AddDays(3).Day.ToString(), invoiceDate.AddDays(3).Month.ToString(), invoiceDate.AddDays(3).Year.ToString());
            invoiceRepository.Insert(invoice);

            var invoiceLineDetail = new InvoiceLineDetail();
            invoiceLineDetail.Id = Guid.NewGuid();
            invoiceLineDetail.InvoiceId = invoice.Id;
            invoiceLineDetail.OwnerId = program.OwnerId ?? default;
            invoiceLineDetail.InvoiceType = InvoiceType.OtherPayments;
            invoiceLineDetail.ProgramUnit = ProgramUnit.Cpu;
            invoiceLineDetail.Approved = YesNo.Yes;
            invoiceLineDetail.AmountSimple = scheduledPaymentAmount ?? 0;
            invoiceLineDetail.ProvinceStateId = provinceBc;
            invoiceLineDetail.TaxExemption = invoice.TaxExemption;
            var invoiceLineDetailId = invoiceLineDetailRepository.Insert(invoiceLineDetail);
            //var invoiceLineDetailId = Guid.Empty;

            invoices.Add((invoice, invoiceLineDetail));
        }

        var test = JsonConvert.SerializeObject(invoices);

        Assert.True(invoices.Any());
    }

    // NOTE this does not work
    [Fact]
    public void Delete_Approved()
    {
        var quarter = 1;
        var provinceBc = Constant.ProvinceBc;
        var currency = new Currency
        {
            Id = Constant.CadCurrency,
            IsoCurrencyCode = IsoCurrencyCode.CAD.ToString()
        };
        var currencyResult = new FindCurrencyResult(currency);

        var invoiceDate = new ProgramController(null, new ApplicationLifetime(null), null).GetInvoiceDate(quarter);

        var dummy = new GetApprovedCommand();
        var programResult = programRepository.GetApproved();

        var invoices = new List<(Invoice invoice, InvoiceLineDetail invoiceLineDetail)>();
        foreach (var program in programResult.Programs)
        {
            var invoiceQuery = new InvoiceQuery();
            invoiceQuery.ProgramId = program.Id;
            invoiceQuery.InvoiceDate = invoiceDate;
            invoiceQuery.Origin = Origin.AutoGenerated;
            // check if invoice has been already created
            var invoiceResult = invoiceRepository.Query(invoiceQuery);
            if (invoiceResult.Invoices.Any())
            {
                invoiceRepository.TryDeleteRange(invoiceResult.Invoices);
            }
        }

        Assert.True(invoices.Any());
    }
}
